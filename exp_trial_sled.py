#code v3***root might not workfrom pylink import *import timeimport gcimport sysimport root_luc1 as root1 import root_luc2 as root2 import numpy as npfrom scipy import statsfrom matplotlib import pyplot as pltimport matplotlib as mplfrom pylab import *from mpl_toolkits.mplot3d import Axes3Dimport serialimport structimport signalsys.path.append('C:/Users/DCC-User/Documents/GitHub/Rudolph')from sledclient import SledClient##SLED##client = SledClient()client.connect('sled', 3375)# Start streaming positionsclient.startStream()time.sleep(2)#go to -0.15client.goto(-0.15)time.sleep(2.5)RIGHT_EYE = 1LEFT_EYE = 0BINOCULAR = 2#LED coordinates#calibration_targets = (99.5,180 187.5,180 275.5,180)FP = (175,93)		def end_trial():	'''Ends recording: adds 100 msec of data to catch final events'''	  	pylink.endRealTimeMode();    	pumpDelay(100);        	getEYELINK().stopRecording(); 	while getEYELINK().getkey() :  	 	pass;def sled_pos():	'''Determines sled direction and phase '''	#finds the sled position	while 1:		sled_position = client.getPosition(client.time())[0][0]		#waits for 0.1seconds, to determine direction		if sled_position > 0:			sled_time = client.time()			while int(client.time() -sled_time) < 0.1:				continue			else:				#calculates new position				sled_position_new = client.getPosition(client.time())[0][0]				#calculates direction 				if int(sled_position_new - sled_position > 0:					Sled_dir = 1					break				else:					sled_position = client.getPosition(client.time())[0][0]					while sled_position > 0:						continue					else:						Sled_dir = 2						break		elif sled_position < 0:			sled_time = client.time()			while int(client.time() -sled_time) < 0.1:				continue			else:				#calculates new position				sled_position_new = client.getPosition(client.time())[0][0]				#calculates direction 				if int(sled_position_new - sled_position < 0:					Sled_dir = 2					break				else:					sled_position = client.getPosition(client.time())[0][0]					while sled_position < 0:						continue					else:						Sled_dir = 1						break	return Sled_dirdef gaze_pos():	'''Calculates gaze position '''		eye_used = getEYELINK().eyeAvailable(); #determine which eye(s) are available 	if eye_used == RIGHT_EYE:  		eye_used = RIGHT_EYE;		#getEYELINK().sendMessage("EYE_USED 1 RIGHT");	elif eye_used == LEFT_EYE or eye_used == BINOCULAR:		#getEYELINK().sendMessage("EYE_USED 0 LEFT");  		eye_used = LEFT_EYE;  	else:  		print "Error in getting the eye information!";  		return TRIAL_ERROR;  			dt = getEYELINK().getNewestSample() # check for new sample update	if(dt != None):		# Gets the gaze position of the latest sample,		if eye_used == RIGHT_EYE and dt.isRightSample():			gaze_position = dt.getRightEye().getGaze()		elif eye_used == LEFT_EYE and dt.isLeftSample():			gaze_position = dt.getLeftEye().getGaze()	return gaze_positiondef drawgc(eyelinkStartTime, ser, sledStartTime):	'''Sends a stimulus to the Arduino; uses the getNewestSample() to get subjects response; uses the response the calculate the SOA and thus the next stimulus '''	#stimulus ranges from -250:-2 in steps of 2ms, and from 2:250 in steps of 2ms	Ledl = dict(zip(range(-2,-251,-2),range(4,129)))	Ledl.update(dict(zip(range(2,251,2),range(130,255))))	Ledl.update({1000:0})	Ledl.update({3000:3})		#variables for root function	i = 0	j = 0	x = np.linspace(-250,-2,125)	x1=np.linspace(2,250,125)	x=np.append(x,x1)	# turns the LEDs OFF	LEDb = Ledl[3000]	ser.write(struct.pack('B',LEDb)) 	# turns the FP LED ON	LEDb = Ledl[1000]	ser.write(struct.pack('B',LEDb))   	minimizer1 = root1.Psi(-250,250,x,np.linspace(-200,200,41),np.linspace(0.1, 100,41))         # make a kontsevic root finder with a range from 0 to 2	minimizer2 = root2.Psi(-250,250,x,np.linspace(-200,200,41),np.linspace(0.1, 100,41))         # make a kontsevic root finder with a range from 0 to 2	#stimr=np.array([-250, -200, -150, -100, -50, 50, 100, 150, 200, 250])	stimr=np.array([-50, 200, -150, 100,-200, -250, 50,  150, -100, 250])	#random.shuffle(stimr)		getEYELINK().flushKeybuttons(0)	buttons =(0, 0);		while 1:		error = getEYELINK().isRecording()  # First check if recording is aborted 		if error!=0:			end_trial();			return error		if i>50:  #finishes the trial after 50 iterations			#print "timeout"			getEYELINK().sendMessage("TIMEOUT");			end_trial();			buttons =(0, 0);			break;		if(getEYELINK().breakPressed()):	# Checks for program termination or ALT-F4 or CTRL-C keys			end_trial();			return ABORT_EXPT		elif(getEYELINK().escapePressed()): # Checks for local ESC key to abort trial (useful in debugging)			end_trial();			return SKIP_TRIAL					buttons = getEYELINK().getLastButtonPress() # Checks for eye-tracker buttons pressed		if(buttons[0] != 0):			getEYELINK().sendMessage("ENDBUTTON %d"%(buttons[0]));			end_trial();			break;				if int(client.time() -sledStartTime) > int(DURATION): 		 = 		sled_pos()									#starts the root/LED experiment					if Sled_dir == 1 # Right:			if i < 10:				stim = np.round(stimr[i])				i = i + 1			else:				stim = minimizer1()  				i = i + 1		elif Sled_dir == 2 # Left:			if j < 10:				stim = np.round(stimr[j])				j = j + 1			else:				stim = minimizer2()  				j = j + 1									while 1:						sled_position = client.getPosition(client.time())[0][0]							if np.absolute(sled_position) > 0.1480:								sled_time = client.time()								if int(client.time() -sled_time) < 0.15:										gaze_position = gaze_pos()					#Determines if subject is fixating, +/- 22 pixels of 175								if gaze_position[0] > 153 and gaze_position[0] < 197:						LED_flag = 1						break				else:					LED_flag = 0					if Sled_dir == 1:						Right_flag = 0					elif Sled_dir == 2:						Left					break						else:				continue						if LED_flag == 0			continue				#Sends a signal to the LED						LEDb = Ledl[stim]		ser.write(struct.pack('B',LEDb)) 		while 1:			gaze_position = gaze_pos()			#checks whether subject looked to the lEFT LED (+/- 22 pixels of 87)			if gaze_position[0] < 109 and gaze_position[0] > 65:				response = 0				#turn OFF all LEDs, turns ON FP				LEDb = Ledl[1000]				ser.write(struct.pack('B',LEDb))				break;			#checks whether subject looked to the RIGHT LED (+/- 22 pixels of 263)			elif gaze_position[0] > 241 and gaze_position[0] < 285:				response = 1				#turn OFF all LEDs, turns ON FP				LEDb = Ledl[1000]				ser.write(struct.pack('B',LEDb))				break;		if Sled_dir == 1 # Right:			p = minimizer1.addMeasurement(response,stim)		elif Sled_dir == 2 # Left:			p = minimizer2.addMeasurement(response,stim)										#turn OFF all LEDs	LEDb = Ledl[3000]	ser.write(struct.pack('B',LEDb))	ser.close()	# get all the data we collected from Psi	data = minimizer.getData()	mu, sigma = minimizer.getTheta()	np.savetxt('data.txt',data)	XY = minimizer.getXY()	#np.savetxt('XY.txt',XY)	#np.savetxt('mu.txt',mu)	#np.savetxt('sigma.txt',sigma)	#print data	#print mu, sigma	#fig =plt.figure()	#plt.plot(data[:,0],data[:,1], 'or')	#stimo = np.linspace(-250,250,251)	#Po = stats.norm.cdf(stimo, loc=0, scale=2)	#P = stats.norm.cdf(stimo, mu, sigma)	#plt.plot(stimo,Po,'k',stimo,P )	#plt.draw()	#plt.show()					end_trial();		#The TRIAL_RESULT message defines the end of a trial for the EyeLink Data Viewer. 	#This is different than the end of recording message END that is logged when the trial recording ends. 	#Data viewer will not parse any messages, events, or samples that exist in the data file after this message. 	getEYELINK().sendMessage("TRIAL_RESULT %d"%(buttons[0]));        return getEYELINK().getRecordingStatus()        				trial_condition = ["Block 1", "Block 2", "Block 3", "Block 4 "];		def do_trial(trial, ser, sledStartTime):	'''Does the simple trial'''	#This supplies the title at the bottom of the eyetracker display	message ="record_status_message 'Trial %d %s'"%(trial+1, trial_condition[trial])	getEYELINK().sendCommand(message);			#Always send a TRIALID message before starting to record.	#EyeLink Data Viewer defines the start of a trial by the TRIALID message.  	#This message is different than the start of recording message START that is logged when the trial recording begins. 	#The Data viewer will not parse any messages, events, or samples, that exist in the data file prior to this message.	msg = "TRIALID %s"%trial_condition[trial];	getEYELINK().sendMessage(msg);			#The following does drift correction at the begin of each trial	while 1:		# Checks whether we are still connected to the tracker		if not getEYELINK().isConnected():			return ABORT_EXPT;							# Does drift correction and handles the re-do camera setup situations		try:                        #print surf.get_rect().w/2,surf.get_rect().h/2#at.LED_dict(1000) #turn On FP LED			error = getEYELINK().doDriftCorrect(FP[0],FP[1],1,1)			if error != 27: 				break;			else:				getEYELINK().doTrackerSetup();		except:			break #getEYELINK().doTrackerSetup()						error = getEYELINK().startRecording(1,1,1,1)	if error:	return error;	gc.disable();	#begin the realtime mode	pylink.beginRealTimeMode(100)	if not getEYELINK().waitForBlockStart(1000, 1, 0):		end_trial();		print "ERROR: No link samples received!";      		return TRIAL_ERROR;      	  		eyelinkStartTime = currentTime()		getEYELINK().sendMessage("SYNCTIME %d"%(currentTime()-eyelinkStartTime));	ret_value = drawgc(eyelinkStartTime, ser, sledStartTime);	pylink.endRealTimeMode();	gc.enable();	return ret_value;				NTRIALS = 1def run_trials():	''' This function is used to run individual trials and handles the trial return values. '''	''' Returns a successful trial with 0, aborting experiment with ABORT_EXPT (3); It also handles	the case of re-running a trial. '''	#Do the tracker setup at the beginning of the experiment.	getEYELINK().doTrackerSetup()		#connect to Arduino	ser = serial.Serial('COM15', 115200)     time.sleep(5)        #start Sled    client.sendCommand("Sinusoid Start 0.15 1.6")    #start timer    sledStartTime = client.time()	for trial in range(NTRIALS):		if(getEYELINK().isConnected() ==0 or getEYELINK().breakPressed()): break;		while 1:			ret_value = do_trial(trial, ser, sledStartTime)			endRealTimeMode()					if (ret_value == TRIAL_OK):				getEYELINK().sendMessage("TRIAL OK");				break;			elif (ret_value == SKIP_TRIAL):				getEYELINK().sendMessage("TRIAL ABORTED");				break;						elif (ret_value == ABORT_EXPT):				getEYELINK().sendMessage("EXPERIMENT ABORTED")				return ABORT_EXPT;			elif (ret_value == REPEAT_TRIAL):				getEYELINK().sendMessage("TRIAL REPEATED");			else: 				getEYELINK().sendMessage("TRIAL ERROR")				break;					return 0;		