#modified from exp_trial.py to detect saccades based on velocity and not positionfrom pylink import *import timeimport gcimport sysRIGHT_EYE = 1LEFT_EYE = 0BINOCULAR = 2#LED coordinatesdef end_trial():		'''Ends recording: adds 100 msec of data to catch final events'''	print "went to end_trial"					pylink.endRealTimeMode();  	pumpDelay(100);       	getEYELINK().stopRecording();	while getEYELINK().getkey() : 		pass;            def gaze_pos():        '''Calculates gaze position '''	eye_used = getEYELINK().eyeAvailable(); #determine which eye(s) are available 	if eye_used == RIGHT_EYE:		eye_used = RIGHT_EYE;		#getEYELINK().sendMessage("EYE_USED 1 RIGHT");	elif eye_used == LEFT_EYE or eye_used == BINOCULAR:		#getEYELINK().sendMessage("EYE_USED 0 LEFT");  		eye_used = LEFT_EYE;  	else:  		print "Error in getting the eye information!";  		return TRIAL_ERROR;	dt = getEYELINK().getNewestSample() # check for new sample update			gaze_position = None	gaze_position_time = None		if(dt != None):		# Gets the gaze position of the latest sample,		if eye_used == RIGHT_EYE and dt.isRightSample():			gaze_position = dt.getRightEye().getGaze()			gaze_position_time = dt.getTime()		elif eye_used == LEFT_EYE and dt.isLeftSample():			gaze_position = dt.getLeftEye().getGaze()			gaze_position_time = dt.getTime()                         		return gaze_position, gaze_position_timedef drift_corr():		''' Does drift correction and handles the re-do camera setup situations'''	pylink.endRealTimeMode();    	pumpDelay(100);        	getEYELINK().stopRecording(); 	print "stopRecording"	print "Drift correction";	error = getEYELINK().doDriftCorrect(FP[0],FP[1],1,1)	if error == 27:						getEYELINK().doTrackerSetup();        		error = getEYELINK().startRecording(1,1,1,1)	print "startRecording"	if error:		return error;	gc.disable();	#begin the realtime mode	pylink.beginRealTimeMode(100)	if not getEYELINK().waitForBlockStart(1000, 1, 0):		end_trial();		print "ERROR: No link samples received!";	t0_eyelink = currentTime()	getEYELINK().sendMessage("SYNCTIME %d"%(currentTime()-t0_eyelink));	def drawgc():	'''Sends a stimulus to the Arduino; uses the getNewestSample() to get subjects response; uses the response the calculate the SOA and thus the next stimulus '''								getEYELINK().flushKeybuttons(0)	buttons =(0, 0);						while 1:		error = getEYELINK().isRecording()  # First check if recording is aborted  					if error!=0:			end_trial();			return error				if i>132:  #finishes the trial after 30 iterations			#print "timeout"			getEYELINK().sendMessage("TIMEOUT");			end_trial();			buttons =(0, 0);			break;				if(getEYELINK().breakPressed()):	# Checks for program termination or ALT-F4 or CTRL-C keys			end_trial();			return ABORT_EXPT				elif(getEYELINK().escapePressed()): # Checks for local ESC key to abort trial (useful in debugging)			end_trial();			return SKIP_TRIAL				buttons = getEYELINK().getLastButtonPress() # Checks for eye-tracker buttons pressed				if(buttons[0] != 0):			getEYELINK().sendMessage("ENDBUTTON %d"%(buttons[0]));			end_trial();			break;		###########EXPERIMENT STARTS##############################################								while 1:			if(getEYELINK().escapePressed()): # Checks for local ESC key to abort trial (useful in debugging)				print "pressed ESC"				end_trial();				return SKIP_TRIAL				break						while 1:				gaze_position, gaze_position_time = gaze_pos()							                          	#The TRIAL_RESULT message defines the end of a trial for the EyeLink Data Viewer. 	#This is different than the end of recording message END that is logged when the trial recording ends. 	#Data viewer will not parse any messages, events, or samples that exist in the data file after this message. 	getEYELINK().sendMessage("TRIAL_RESULT %d"%(buttons[0]));	return getEYELINK().getRecordingStatus()        trial_condition = ["Block 1", "Block 2", "Block 3", "Block 4 "];	def do_trial(trial):	'''Does the simple trial'''							#This supplies the title at the bottom of the eyetracker display	message ="record_status_message 'Trial %d %s'"%(trial+1, trial_condition[trial])	getEYELINK().sendCommand(message);									#Always send a TRIALID message before starting to record.	#EyeLink Data Viewer defines the start of a trial by the TRIALID message.  	#This message is different than the start of recording message START that is logged when the trial recording begins. 	#The Data viewer will not parse any messages, events, or samples, that exist in the data file prior to this message.	msg = "TRIALID %s"%trial_condition[trial];	getEYELINK().sendMessage(msg);						#The following does drift correction at the begin of each trial	while 1:		# Checks whether we are still connected to the tracker		if not getEYELINK().isConnected():			return ABORT_EXPT;					# Does drift correction and handles the re-do camera setup situations		try:                        #print surf.get_rect().w/2,surf.get_rect().h/2#at.LED_dict(1000) #turn On FP LED			error = getEYELINK().doDriftCorrect(FP[0],FP[1],1,1)			if error != 27: 				break;			else:				getEYELINK().doTrackerSetup();		except:			break #getEYELINK().doTrackerSetup()		error = getEYELINK().startRecording(1,1,1,1)	print error	if error:            return error;	gc.disable();	#begin the realtime mode	pylink.beginRealTimeMode(100)	if not getEYELINK().waitForBlockStart(1000, 1, 0):		end_trial();		print "ERROR: No link samples received!";      		return TRIAL_ERROR;	t0_eyelink = currentTime()	getEYELINK().sendMessage("SYNCTIME %d"%(currentTime()-t0_eyelink));	ret_value = drawgc();	pylink.endRealTimeMode();	gc.enable();	return ret_value;NTRIALS = 1def run_trials():	''' This function is used to run individual trials and handles the trial return values. '''	''' Returns a successful trial with 0, aborting experiment with ABORT_EXPT (3); It also handles	the case of re-running a trial. '''	#Do the tracker setup at the beginning of the experiment.	getEYELINK().doTrackerSetup()	for trial in range(NTRIALS):		if(getEYELINK().isConnected() ==0 or getEYELINK().breakPressed()): break;		while 1:			ret_value = do_trial(trial)			endRealTimeMode()			if (ret_value == TRIAL_OK):				getEYELINK().sendMessage("TRIAL OK");				break;			elif (ret_value == SKIP_TRIAL):				getEYELINK().sendMessage("TRIAL ABORTED");				break;						elif (ret_value == ABORT_EXPT):				getEYELINK().sendMessage("EXPERIMENT ABORTED")				return ABORT_EXPT;			elif (ret_value == REPEAT_TRIAL):				getEYELINK().sendMessage("TRIAL REPEATED");			else: 				getEYELINK().sendMessage("TRIAL ERROR")				break;	return 0;